import java.util.LinkedList;
import java.util.List;

class Solution {
    private static LinkedList<Integer>[] graph;
    private static int[] incomingEdges;
    static int[] answer = new int[4];

    public static int[] solution(int[][] edges) {
        int len = 0;
        for (int[] edge : edges) {
            len = Math.max(len, edge[0]);
            len = Math.max(len, edge[1]);
        }

        incomingEdges = new int[len + 1];
        graph = new LinkedList[len + 1];
        // 그래프 초기화
        initGraph(edges);

        // 임의의 정점 찾기
        int root = findCreateVertex();
        answer[0] = root;
        // 그래프의 사이즈 (이후에 2개의 그래프만 구해 전체에서 빼기 위해)
        int graphSize = graph[root].size();

        List<Integer> children = graph[root];
        for (int cur : children) {
            incomingEdges[cur]--;
            findNode(cur, cur);
        }

        answer[1] = graphSize - answer[3] - answer[2];
        return answer;
    }

    private static void initGraph(int[][] edges) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new LinkedList<>();
        }

        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            incomingEdges[edge[1]]++;
        }
    }

    // 임의의 정점은 나가는 간선이 2개 이상
    // 들어오는 간선은 없음
    private static int findCreateVertex() {
        for (int i = 1; i < graph.length; i++) {
            if (graph[i].size() >= 2 && incomingEdges[i] == 0) {
                return i;
            }
        }
        return 0;
    }

    // 8자, 1자 그래프 탐색
    // 전체 그래프에서 뺄 두 개의 그래프를 8자와 1자로 한 이유는, 도넛의 경우 나가는 간선과 들어오는 간선이 2개이거나 1개인
    // 경우 모두 성립하여 조건이 까다롭기 때문
    // 막대 그래프는 마지막에 나가는 간선이 없음
    // 잘라낸 그래프
    // 11 2 8 재귀 탐색
    private static void findNode(int node, int vis) {
        int cur = 0;
        if (graph[node].isEmpty()) {
            answer[2]++;
            return;
        } else {
            cur = graph[node].get(0);
            if (graph[cur].size() == 2 && incomingEdges[cur] == 2) {
                answer[3]++;
                return;
            } else if (vis == cur) {
                return;
            }
        }
        findNode(cur, vis);
    }
}
